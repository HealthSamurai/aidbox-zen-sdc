{ns forms.allergies
 import #{zenbox aidbox.sdc aidbox.sdc.fhir}


 AllergiesDocument
 {:zen/tags #{zen/schema aidbox.sdc/doc aidbox.sdc/rules},
 :zen/desc "Allergies",
 :type zen/map,
 :confirms #{aidbox.sdc/Document},
 :keys {:allergies {:type zen/vector,
                    :every {:type zen/map,
                            :require #{:type},
                            :keys {:id {:type zen/string},
                                   :status {:type zen/string,
                                            :sdc/default-value "active"},
                                   :substance {:type zen/map,
                                               :zen/desc "Agent/substance",
                                               :sdc-type aidbox.sdc/choice,
                                               :confirms #{aidbox.sdc.fhir/coding},
                                               :enum [{:value {:display "Latex",
                                                               :code "111088007",
                                                               :system "http://snomed.ct"}}
                                                      {:value {:display "Pollen",
                                                               :code "256259004",
                                                               :system "http://snomed.ct"}}
                                                      {:value {:display "Grass pollen",
                                                               :code "256277009",
                                                               :system "http://snomed.ct"}}
                                                      {:value {:display "Horse dander",
                                                               :code "256417003",
                                                               :system "http://snomed.ct"}}]},
                                   :type {:type zen/map,
                                          :zen/desc "Type",
                                          :confirms #{aidbox.sdc.fhir/coding},
                                          :sdc-type aidbox.sdc/choice,
                                          :enum [{:value {:display "Drug",
                                                          :code "418634005",
                                                          :system "http://snomed.ct"}}
                                                 {:value {:display "Food",
                                                          :code "414285001",
                                                          :system "http://snomed.ct"}}
                                                 {:value {:display "Enviornmental",
                                                          :code "426232007",
                                                          :system "http://snomed.ct"}}]},
                                   :reaction {:type zen/vector,
                                              :sdc-type aidbox.sdc/choice,
                                              :zen/desc "Reaction",
                                              :every {:type zen/map,
                                                      :zen/desc "Reaction",
                                                      :sdc-type aidbox.sdc/choice,
                                                      :confirms #{aidbox.sdc.fhir/coding},
                                                      :enum [{:value {:display "Anaphylaxis",
                                                                      :code "39579001",
                                                                      :system "http://snomed.ct"}}
                                                             {:value {:display "Headache",
                                                                      :code "25064002",
                                                                      :system "http://snomed.ct"}}
                                                             {:value {:display "Hives (Wheal)",
                                                                      :code "247472004",
                                                                      :system "http://snomed.ct"}}
                                                             {:value {:display "Nausea",
                                                                      :code "422587007",
                                                                      :system "http://snomed.ct"}}
                                                             {:value {:display "Vomiting",
                                                                      :code "422400008",
                                                                      :system "http://snomed.ct"}}
                                                             {:value {:display "Other",
                                                                      :code "782197009",
                                                                      :system "http://snomed.ct"}}]}},
                                   :other-reaction {:type zen/string,
                                                    :zen/desc "Other reaction"},
                                   :notes {:type zen/string,
                                           :zen/desc "Notes"}}}}}}


 AllergyInplaceForm
 {:zen/tags #{aidbox.sdc/Layout}
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/col
   :children
   [{:bind [:type]
     :sdc/display-when (lisp/= (lisp/count (lisp/matcho-filter (lisp/get-in lisp/global [:allergies])
                                                               {:substance {:code "409137002"}})) 0)}
    {:bind [:type]
     :sdc/display-when (lisp/> (lisp/count (lisp/matcho-filter (lisp/get-in lisp/global [:allergies])
                                                               {:substance {:code "409137002"}})) 0)}
    {:bind [:reaction]}
    {:bind [:other-reaction]
     :sdc/display-when (lisp/> (lisp/count (lisp/matcho-filter (lisp/get-in [:reaction]) {:code "782197009"})) 0)}
    {:bind [:substance]}
    {:bind [:notes]}]}}

 ;; dates: added date, inactivate date
 AllergiesLayout
 {:zen/tags #{aidbox.sdc/Layout}
  :document AllergiesDocument
  :engine aidbox.sdc/Hiccup
  :layout
  {:type aidbox.sdc/grid-editor
   :bind [:allergies]
   :new-form {:form-ref AllergyInplaceForm}
   :edit-form {:form-ref AllergyInplaceForm}
   :empty-widget {:type aidbox.sdc/label
                  :label "No active allergies"}
   :columns [{:label "Agent / Substance"
              :type aidbox.sdc/label
              :bind [:substance :display]}
             {:label "Type"
              :type aidbox.sdc/label
              :bind [:type]}
             {:label "Reaction"
              :type aidbox.sdc/label
              :bind [:reaction 0 :display]}]
   :quick-row [{:label "NKDA"
                :type aidbox.sdc/add-value-button
                :sdc/disable-when (lisp/> (lisp/- (lisp/count (lisp/matcho-filter (lisp/get-in [:allergies])
                                                                                  {:type {:code "418634005"} :status "active"}))
                                                  (lisp/count (lisp/matcho-filter (lisp/get-in [:allergies])
                                                                                  {:substance {:code "409137002"}}))) 0)
                :value {:status "active"
                        :type {:display "Drug", :code "418634005",
                               :system "https://snomed.ct"}
                        :substance {:code "409137002" :system "http://snomed.ct" :display "No Known Drug Allergies"}}}]
   :row-actions [{:type aidbox.sdc/grid-edit-button
                  :label "Edit"
                  :sdc/display-when (lisp/not (lisp/= (lisp/get-in [:substance :code]) "409137002"))}
                 {:label "Inactivate"
                  :type aidbox.sdc/set-value-button
                  :bind [:status]
                  :value "inactive"
                  :sdc/display-when (lisp/and (lisp/not (lisp/= "inactive" (lisp/get-in [:status])))
                                              (lisp/not (lisp/= "409137002" (lisp/get-in [:substance :code]))))}
                 {:label "Activate"
                  :type aidbox.sdc/set-value-button
                  :bind [:status]
                  :value "active"
                  :sdc/display-when (lisp/and (lisp/= "inactive" (lisp/get-in [:status]))
                                              (lisp/not (lisp/= "409137002" (lisp/get-in [:substance :code])))
                                              (lisp/not
                                                (lisp/and
                                                  (lisp/= "418634005" (lisp/get-in [:type :code]))
                                                  (lisp/> (lisp/count (lisp/matcho-filter
                                                                        (lisp/get-in lisp/global [:allergies])
                                                                        {:substance {:code "409137002"} :status "active"})) 0))))}]

   #_#_:filters [{:engine :matcho
              :options [{:status "active"} {}]
              :sdc/disable-when (lisp/< (lisp/count (lisp/matcho-filter (lisp/get-in [:allergies])
                                                                        {:status "inactive"})) 1)
              :control heal.controls/ButtonChoice}]}}

 AllergiesLaunch
 {:zen/tags #{aidbox.sdc/Launch}
  :document AllergiesDocument
  :params {:encounter-id {:type zen/string}}
  :populate-engine aidbox.sdc/LispPopulate
  :populate {:author    (lisp/get-in [:ctx :user])
             :encounter {:id (lisp/get-in [:params :encounter-id])
                         :resourceType "Encounter"}
             :patient   (lisp/sql {:select [:#> :resource [:subject]]
                                   :from :Encounter
                                   :where [:= :id (lisp/get-in [:params :encounter-id])]})
             :allergies (lisp/sql* {:select  {:allergy ^:pg/obj {:id :id
                                                                 :substance [:#> :resource [:reaction 0 :substance :coding 0]]
                                                                 :status [:#>> :resource [:clinicalStatus :coding 0 :code]]
                                                                 :notes [:#>> :resource [:note 0 :text]]
                                                                 :type ^:pg/obj {:code [:#>> :resource [:code :coding 0 :code]]
                                                                                 :display [:#>> :resource [:code :coding 0 :display]]
                                                                                 :system [:#>> :resource [:code :coding 0 :system]]}

                                                                 :reaction ^:pg/fn [:to_jsonb [:pg/sql "knife_extract(resource#>'{reaction}', '[[\"manifestation\",0,\"coding\",0]]')"]]}}
                                    :from :AllergyIntolerance
                                    :where [:and
                                            [:=
                                             [:#>> :resource [:patient :id]]
                                             (lisp/sql
                                               {:select [:#> :resource [:subject :id]]
                                                :from :Encounter
                                                :where [:= :id (lisp/get-in [:params :encounter-id])]})]]})}}

 ;; valueset populates workflow?
 AllergiesFinalize
 {:zen/tags #{aidbox.sdc/Finalize zen/schema}
  :document AllergiesDocument
  :export-engine aidbox.sdc/LispExport
  :create [(lisp/rpc {:method 'aidbox.sdc/convert-document
                      :params {:id (lisp/get :id)}})
           (lisp/for [lisp/i (lisp/get-in [:allergies])]
             {:id (lisp/get-in lisp/i [:id])
              :clinicalStatus {:coding [{:code (lisp/or (lisp/get-in lisp/i [:status]) "active")}]}
              :verificationStatus {:coding [{:code "confirmed"}]}
              :code {:coding [{:code (lisp/get-in lisp/i [:type :code])
                               :display (lisp/get-in lisp/i [:type :display])
                               :system (lisp/get-in lisp/i [:type :system])}]}
              :reaction (lisp/for [lisp/j (lisp/get-in lisp/i [:reaction])]
                          {:manifestation [{:coding [lisp/j]}]
                           :substance {:coding [(lisp/get-in lisp/i [:substance])]}})
              :note (lisp/when (lisp/get-in lisp/i [:notes])
                      [{:text (lisp/get-in lisp/i [:notes])}])
              :patient (lisp/get :patient)
              :encounter (lisp/get :encounter)
              :recordedDate (lisp/date)
              :resourceType "AllergyIntolerance"})]}

 AllergiesForm
 {:zen/tags #{aidbox.sdc/Form}
  :title    "Allergies"
  :version  "1.0.0"
  :document AllergiesDocument
  :layout   AllergiesLayout
  :launch   AllergiesLaunch
  :finalize AllergiesFinalize}}
